// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.10.1 with parameter "target=js+dts,import_extension=js,valid_types=protovalidate_required+legacy_required"
// @generated from file extra/buf_validate_types.proto (package spec, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file extra/buf_validate_types.proto.
 */
export declare const file_extra_buf_validate_types: GenFile;

/**
 * Test message for buf_validate with simple read-only field constraints
 *
 * @generated from message spec.BufValidateSimple
 */
export declare type BufValidateSimple = Message<"spec.BufValidateSimple"> & {
  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: int32 age = 3;
   */
  age: number;
};

/**
 * Test message for buf_validate with simple read-only field constraints
 *
 * @generated from message spec.BufValidateSimple
 */
export declare type BufValidateSimpleValid = Message<"spec.BufValidateSimple"> & {
  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: int32 age = 3;
   */
  age: number;
};

/**
 * Describes the message spec.BufValidateSimple.
 * Use `create(BufValidateSimpleSchema)` to create a new message.
 */
export declare const BufValidateSimpleSchema: GenMessage<BufValidateSimple, {validType: BufValidateSimpleValid}>;

/**
 * Test message for buf_validate with multiple read-only fields
 *
 * @generated from message spec.BufValidateMultiple
 */
export declare type BufValidateMultiple = Message<"spec.BufValidateMultiple"> & {
  /**
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * @generated from field: bool active = 4;
   */
  active: boolean;
};

/**
 * Test message for buf_validate with multiple read-only fields
 *
 * @generated from message spec.BufValidateMultiple
 */
export declare type BufValidateMultipleValid = Message<"spec.BufValidateMultiple"> & {
  /**
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * @generated from field: bool active = 4;
   */
  active: boolean;
};

/**
 * Describes the message spec.BufValidateMultiple.
 * Use `create(BufValidateMultipleSchema)` to create a new message.
 */
export declare const BufValidateMultipleSchema: GenMessage<BufValidateMultiple, {validType: BufValidateMultipleValid}>;

/**
 * Test message for buf_validate with !has() pattern
 *
 * @generated from message spec.BufValidateNotHas
 */
export declare type BufValidateNotHas = Message<"spec.BufValidateNotHas"> & {
  /**
   * @generated from field: string other_field = 2;
   */
  otherField: string;
};

/**
 * Test message for buf_validate with !has() pattern
 *
 * @generated from message spec.BufValidateNotHas
 */
export declare type BufValidateNotHasValid = Message<"spec.BufValidateNotHas"> & {
  /**
   * @generated from field: string other_field = 2;
   */
  otherField: string;
};

/**
 * Describes the message spec.BufValidateNotHas.
 * Use `create(BufValidateNotHasSchema)` to create a new message.
 */
export declare const BufValidateNotHasSchema: GenMessage<BufValidateNotHas, {validType: BufValidateNotHasValid}>;

/**
 * Nested message for testing nested constraints
 *
 * @generated from message spec.NestedChild
 */
export declare type NestedChild = Message<"spec.NestedChild"> & {
  /**
   * @generated from field: string child_name = 1;
   */
  childName: string;

  /**
   * @generated from field: string child_value = 2;
   */
  childValue: string;

  /**
   * @generated from field: int32 child_count = 3;
   */
  childCount: number;
};

/**
 * Nested message for testing nested constraints
 *
 * @generated from message spec.NestedChild
 */
export declare type NestedChildValid = Message<"spec.NestedChild"> & {
  /**
   * @generated from field: string child_name = 1;
   */
  childName: string;

  /**
   * @generated from field: string child_value = 2;
   */
  childValue: string;

  /**
   * @generated from field: int32 child_count = 3;
   */
  childCount: number;
};

/**
 * Describes the message spec.NestedChild.
 * Use `create(NestedChildSchema)` to create a new message.
 */
export declare const NestedChildSchema: GenMessage<NestedChild, {validType: NestedChildValid}>;

/**
 * Test message for buf_validate with nested field constraints
 *
 * @generated from message spec.BufValidateNested
 */
export declare type BufValidateNested = Message<"spec.BufValidateNested"> & {
  /**
   * @generated from field: spec.NestedChild nested = 1;
   */
  nested?: Omit<NestedChild, 'childName' | 'childCount'>;

  /**
   * @generated from field: string parent_field = 2;
   */
  parentField: string;
};

/**
 * Test message for buf_validate with nested field constraints
 *
 * @generated from message spec.BufValidateNested
 */
export declare type BufValidateNestedValid = Message<"spec.BufValidateNested"> & {
  /**
   * @generated from field: spec.NestedChild nested = 1;
   */
  nested?: Omit<NestedChildValid, 'childName' | 'childCount'>;

  /**
   * @generated from field: string parent_field = 2;
   */
  parentField: string;
};

/**
 * Describes the message spec.BufValidateNested.
 * Use `create(BufValidateNestedSchema)` to create a new message.
 */
export declare const BufValidateNestedSchema: GenMessage<BufValidateNested, {validType: BufValidateNestedValid}>;

/**
 * Test message combining multiple CEL patterns with logical operators
 *
 * @generated from message spec.BufValidateCombined
 */
export declare type BufValidateCombined = Message<"spec.BufValidateCombined"> & {
  /**
   * @generated from field: string field3 = 3;
   */
  field3: string;
};

/**
 * Test message combining multiple CEL patterns with logical operators
 *
 * @generated from message spec.BufValidateCombined
 */
export declare type BufValidateCombinedValid = Message<"spec.BufValidateCombined"> & {
  /**
   * @generated from field: string field3 = 3;
   */
  field3: string;
};

/**
 * Describes the message spec.BufValidateCombined.
 * Use `create(BufValidateCombinedSchema)` to create a new message.
 */
export declare const BufValidateCombinedSchema: GenMessage<BufValidateCombined, {validType: BufValidateCombinedValid}>;

/**
 * Test message with snake_case fields that should be converted to camelCase
 *
 * @generated from message spec.BufValidateSnakeCase
 */
export declare type BufValidateSnakeCase = Message<"spec.BufValidateSnakeCase"> & {
  /**
   * @generated from field: string first_name = 2;
   */
  firstName: string;

  /**
   * @generated from field: string last_name = 3;
   */
  lastName: string;
};

/**
 * Test message with snake_case fields that should be converted to camelCase
 *
 * @generated from message spec.BufValidateSnakeCase
 */
export declare type BufValidateSnakeCaseValid = Message<"spec.BufValidateSnakeCase"> & {
  /**
   * @generated from field: string first_name = 2;
   */
  firstName: string;

  /**
   * @generated from field: string last_name = 3;
   */
  lastName: string;
};

/**
 * Describes the message spec.BufValidateSnakeCase.
 * Use `create(BufValidateSnakeCaseSchema)` to create a new message.
 */
export declare const BufValidateSnakeCaseSchema: GenMessage<BufValidateSnakeCase, {validType: BufValidateSnakeCaseValid}>;

/**
 * Test message without CEL constraints (should not apply Omit)
 *
 * @generated from message spec.BufValidateNoCel
 */
export declare type BufValidateNoCel = Message<"spec.BufValidateNoCel"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Test message without CEL constraints (should not apply Omit)
 *
 * @generated from message spec.BufValidateNoCel
 */
export declare type BufValidateNoCelValid = Message<"spec.BufValidateNoCel"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message spec.BufValidateNoCel.
 * Use `create(BufValidateNoCelSchema)` to create a new message.
 */
export declare const BufValidateNoCelSchema: GenMessage<BufValidateNoCel, {validType: BufValidateNoCelValid}>;

/**
 * Test message with multiple nested constraints on different fields
 *
 * @generated from message spec.BufValidateMultipleNested
 */
export declare type BufValidateMultipleNested = Message<"spec.BufValidateMultipleNested"> & {
  /**
   * @generated from field: spec.NestedChild child1 = 1;
   */
  child1?: Omit<NestedChild, 'childName'>;

  /**
   * @generated from field: spec.NestedChild child2 = 2;
   */
  child2?: Omit<NestedChild, 'childValue'>;

  /**
   * @generated from field: string parent_name = 3;
   */
  parentName: string;
};

/**
 * Test message with multiple nested constraints on different fields
 *
 * @generated from message spec.BufValidateMultipleNested
 */
export declare type BufValidateMultipleNestedValid = Message<"spec.BufValidateMultipleNested"> & {
  /**
   * @generated from field: spec.NestedChild child1 = 1;
   */
  child1?: Omit<NestedChildValid, 'childName'>;

  /**
   * @generated from field: spec.NestedChild child2 = 2;
   */
  child2?: Omit<NestedChildValid, 'childValue'>;

  /**
   * @generated from field: string parent_name = 3;
   */
  parentName: string;
};

/**
 * Describes the message spec.BufValidateMultipleNested.
 * Use `create(BufValidateMultipleNestedSchema)` to create a new message.
 */
export declare const BufValidateMultipleNestedSchema: GenMessage<BufValidateMultipleNested, {validType: BufValidateMultipleNestedValid}>;

/**
 * Test message with required field and buf_validate
 *
 * @generated from message spec.BufValidateWithRequired
 */
export declare type BufValidateWithRequired = Message<"spec.BufValidateWithRequired"> & {
  /**
   * @generated from field: string required_field = 2;
   */
  requiredField: string;

  /**
   * @generated from field: string normal_field = 3;
   */
  normalField: string;
};

/**
 * Test message with required field and buf_validate
 *
 * @generated from message spec.BufValidateWithRequired
 */
export declare type BufValidateWithRequiredValid = Message<"spec.BufValidateWithRequired"> & {
  /**
   * @generated from field: string required_field = 2;
   */
  requiredField: string;

  /**
   * @generated from field: string normal_field = 3;
   */
  normalField: string;
};

/**
 * Describes the message spec.BufValidateWithRequired.
 * Use `create(BufValidateWithRequiredSchema)` to create a new message.
 */
export declare const BufValidateWithRequiredSchema: GenMessage<BufValidateWithRequired, {validType: BufValidateWithRequiredValid}>;

/**
 * Test message for OR logical operator
 *
 * @generated from message spec.BufValidateOr
 */
export declare type BufValidateOr = Message<"spec.BufValidateOr"> & {
  /**
   * @generated from field: string field1 = 1;
   */
  field1: string;

  /**
   * @generated from field: string field2 = 2;
   */
  field2: string;

  /**
   * @generated from field: string field3 = 3;
   */
  field3: string;
};

/**
 * Test message for OR logical operator
 *
 * @generated from message spec.BufValidateOr
 */
export declare type BufValidateOrValid = Message<"spec.BufValidateOr"> & {
  /**
   * @generated from field: string field1 = 1;
   */
  field1: string;

  /**
   * @generated from field: string field2 = 2;
   */
  field2: string;

  /**
   * @generated from field: string field3 = 3;
   */
  field3: string;
};

/**
 * Describes the message spec.BufValidateOr.
 * Use `create(BufValidateOrSchema)` to create a new message.
 */
export declare const BufValidateOrSchema: GenMessage<BufValidateOr, {validType: BufValidateOrValid}>;

/**
 * Test message with repeated fields
 *
 * @generated from message spec.BufValidateWithRepeated
 */
export declare type BufValidateWithRepeated = Message<"spec.BufValidateWithRepeated"> & {
  /**
   * @generated from field: repeated string list_field = 2;
   */
  listField: string[];

  /**
   * @generated from field: repeated spec.NestedChild nested_list = 3;
   */
  nestedList: NestedChild[];
};

/**
 * Test message with repeated fields
 *
 * @generated from message spec.BufValidateWithRepeated
 */
export declare type BufValidateWithRepeatedValid = Message<"spec.BufValidateWithRepeated"> & {
  /**
   * @generated from field: repeated string list_field = 2;
   */
  listField: string[];

  /**
   * @generated from field: repeated spec.NestedChild nested_list = 3;
   */
  nestedList: NestedChildValid[];
};

/**
 * Describes the message spec.BufValidateWithRepeated.
 * Use `create(BufValidateWithRepeatedSchema)` to create a new message.
 */
export declare const BufValidateWithRepeatedSchema: GenMessage<BufValidateWithRepeated, {validType: BufValidateWithRepeatedValid}>;

/**
 * Test message referencing another message with buf_validate
 *
 * @generated from message spec.BufValidateReference
 */
export declare type BufValidateReference = Message<"spec.BufValidateReference"> & {
  /**
   * @generated from field: spec.BufValidateSimple simple = 1;
   */
  simple?: BufValidateSimple;

  /**
   * @generated from field: spec.BufValidateNested nested = 2;
   */
  nested?: BufValidateNested;

  /**
   * @generated from field: string own_field = 3;
   */
  ownField: string;
};

/**
 * Test message referencing another message with buf_validate
 *
 * @generated from message spec.BufValidateReference
 */
export declare type BufValidateReferenceValid = Message<"spec.BufValidateReference"> & {
  /**
   * @generated from field: spec.BufValidateSimple simple = 1;
   */
  simple?: BufValidateSimpleValid;

  /**
   * @generated from field: spec.BufValidateNested nested = 2;
   */
  nested?: BufValidateNestedValid;

  /**
   * @generated from field: string own_field = 3;
   */
  ownField: string;
};

/**
 * Describes the message spec.BufValidateReference.
 * Use `create(BufValidateReferenceSchema)` to create a new message.
 */
export declare const BufValidateReferenceSchema: GenMessage<BufValidateReference, {validType: BufValidateReferenceValid}>;

